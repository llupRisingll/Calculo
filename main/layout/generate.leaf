<div class="row" style="margin-top: 30px">
	<div class="col-md-8"> </div>
	<div class="col-md-4">
		<div class="row">
			<div class="col-md-12 col-lg-6">
				<label> <b>Select Year: </b> </label>
			</div>
			<div class="col-md-12 col-lg-6">
				<select name="yearSelection" id="yearSelection" class="form-control" title="Select Year">
					<option value="asd">Loading data...</option>
				</select>
			</div>
		</div>
	</div>
</div>

{# This is the panel for monthly daily etc.. #}
<div class="row" style="margin-bottom: 10px">
	<div class="col-md-4">
		<div class="col-md-6">
			<label><b>Select Interval</b></label>
		</div>
		<div class="col-md-6">
			<select class="form-control" name="intervalSelection" id="intervalSelection" title="Select Interval">
				<option value="loading..">Loading... Please wait...</option>
			</select>
		</div>
	</div>
	<div class="col-md-4">
		<div class="col-md-6">
			<label><b>Select Month</b></label>
		</div>
		<div class="col-md-6">
			<select class="form-control" name="monthSelection" id="monthSelection" title="Select Month">
				<option value="1">January</option>
				<option value="2">February</option>
				<option value="3">March</option>
				<option value="4">April</option>
				<option value="5">May</option>
				<option value="6">June</option>
				<option value="7">July</option>
				<option value="8">August</option>
				<option value="9">September</option>
				<option value="10">October</option>
				<option value="11">November</option>
				<option value="12">December</option>
			</select>
		</div>
	</div>
	<div class="col-md-4"></div>
</div>

<div class="row">
	<div class="col-md-4">
		<div class="card">
			<div class="card-block">
				<div class="media">
					<div class="media-body">
						<strong class="text-muted">Daily</strong>
						<p class="h2 m-b-0"> <strong id="fullDailyAmount">Loading...</strong> </p>
					</div>
					<div class="media-right media-middle">
						<i class="material-icons md-48 text-muted-light">person_outline</i>
					</div>
				</div>
			</div>

			{# This is the SVG that Creates G   RAPH STATISTICS #}
			<div id="weekArea" style="height: 220px; position: relative; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);">
			</div>
		</div>
	</div>
	<div class="col-md-4">
		<div class="card">
			<div class="card-block">
				<div class="media">
					<div class="media-body">
						<strong class="text-muted">Weekly</strong>
						<p class="h2 m-b-0"> <strong id="fullWeeklyAmount">Loading...</strong> </p>
					</div>
					<div class="media-right media-middle">
						<i class="material-icons md-48 text-muted-light">person_outline</i>
					</div>
				</div>

				{# This is the SVG that Creates G   RAPH STATISTICS #}
				<div id="monthArea" style="height: 220px; position: relative; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);">
				</div>
			</div>
		</div>
	</div>
	<div class="col-md-4">
		<div class="card">
			<div class="card-block">
				<div class="media">
					<div class="media-body">
						<strong class="text-muted">Monthly</strong>
						<p class="h2 m-b-0"> <strong id="fullYearAmount">Loading...</strong> </p>
					</div>
					<div class="media-right media-middle">
						<i class="material-icons md-48 text-muted-light">person_outline</i>
					</div>
				</div>
				{# This is the SVG that Creates GRAPH STATISTICS #}
				<div id="yearlyArea" style="height: 220px; position: relative; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);">
				</div>
			</div>
		</div>
	</div>
</div>
<div class="row" style="margin-bottom: 50px; ">
	<div class="col-md-6">
		<h4 class="page-heading"><span class="icon-text"> &copy; Luis Edward M. Miranda - 2017</span></h4>
		<div class="card">
			<div class="card-block">
				This Web Application and the Hardware connected here (Raspberry Pi)
				is only intended for my thesis and is <b>not for sale</b>. The frontend and backend of
				the Web Application, also the Algorithm used in Image Processing is property of mine.
				<br><b>- Luis Edward M. Miranda.</b>
			</div>
		</div>
	</div>
	<div class="col-md-6">
		<h4 class="page-heading"><i class="material-icons md-36">description</i> <span class="icon-text">Statistics Report</span></h4>
		<div class="card">
			<table class="table table-fit">
				<tbody>
				<tr>
					<td style="vertical-align: middle">Generate Statistics Report</td>
					<td class="text-right">
						<button class="btn btn-warning form-control" onclick="print()">Print</button>
					</td>
				</tr>
				</tbody>
			</table>
		</div>

	</div>
</div>

<script type="text/javascript">
    var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    var dayNames = ["Sun", "Mon", "Tue", "Wed", "Thurs", "Fri", "Sat"];
    var monthlyGraph = Morris.Area({
            element: 'monthArea',
            data: [],
            xkey: 'date',
            ykeys: ['total'],
            labels: ['Weekly Visitors'],
            lineColors: [colors[ 'purple-500' ]],
            fillOpacity: .3,
            grid: .1,
            gridTextColor: '000',
            resize: true
        }),
        monthlyGraphData = [],
        weeklyGraph = Morris.Area({
            element: 'weekArea',
            data: [],
            xkey: 'date',
            ykeys: ['amount'],
            labels: ['Daily Visitors'],
            xLabelFormat: function (x) { return dayNames[x.getDay()]; },
            lineColors: [colors['warning-color'], colors['grey-400']],
            fillOpacity: .3,
            grid: .1,
            gridTextColor: '000',
            resize: true
        }),
        weeklyGraphData = [],
        yearGraph = Morris.Area({
            element: 'yearlyArea',
            data: [],
            xkey: 'date',
            ykeys: ['amount'],
            labels: ['No. of Visitors'],
            xLabelFormat: function (x) { return monthNames[x.getMonth()]; },
            xLabelMargin: 10,
            lineColors: [colors[ 'chart-primary' ]],
            fillOpacity: .3,
            grid: .1,
            gridTextColor: '000',
            resize: true
        });

    function daysInMonth(month, year) {
        return new Date(year, month, 0).getDate();
    }

    function getWeekCount(month, year) {
        date = new Date(year, month-1, 1);
        day = date.getDay();
        numDaysInMonth = new Date(year, month, 0).getDate();
        return Math.ceil((numDaysInMonth + day) / 7);
    }

    function getEndofWeek(month, year, date){
        var curr;
        curr = new Date(year, month-1, date);

        var sat;
        sat = 6 - curr.getDay();
        curr.setDate(curr.getDate()+sat);
        return curr.getDate();
    }
    function betweenDate(min, max) {
        var x = new Date().getDate();
        return x >= min && x <= max;
    }


    function getWeekIntervals(month, year) {
        var arr = [],
            currDate = 0;

        for (var i=0; i < getWeekCount(month, year); i++) {
            // Do this when you are in the first index
            if (i === 0){
                currDate = getEndofWeek(month, year, 1);
                arr.push(currDate);
            }
            // Do this when the index is the last one
            else if (i === getWeekCount(month, year)-1) {
                if (getEndofWeek(month, year, currDate + 1) <= 7) {
                    arr.push(daysInMonth(month, year));
                }
            }
            // DO this when you are in the middle of an index
            else {
                arr.push(getEndofWeek(month, year, currDate+1));
                currDate = getEndofWeek(month, year, currDate+1);
            }
        }

        // Return the Array of Intervals
        return arr;
    }

    function updateIntervalSelection(month, year){
        var weekendArray = getWeekIntervals(month, year);
        var lastWEAval = 1;
        $intervalSelection.html("");

        for (var d=0; d < weekendArray.length; d++){
            var $opt;
            if (d === 0){
                if(new Date().getFullYear() === year && betweenDate(1, weekendArray[d])){
                    $opt = $("<option/>", {"selected": "selected", "value": "1," +weekendArray[d]}).text(monthNames[month-1]+" 1 to " + weekendArray[d]);
                } else{
                    $opt = $("<option/>", {"value": "1," +weekendArray[d]}).text(monthNames[month-1]+" 1 to " + weekendArray[d]);
                }

            }else{
                if (new Date().getFullYear() === year && betweenDate((lastWEAval+1), weekendArray[d])){
                    $opt = $("<option/>", {"selected": "selected", "value": (lastWEAval+1)+ ","+ weekendArray[d]}).text(monthNames[month-1] + " " +(lastWEAval+1)+ " to "+ weekendArray[d]);
                } else{
                    $opt = $("<option/>", {"value": (lastWEAval+1)+ ","+ weekendArray[d]}).text(monthNames[month-1] + " " +(lastWEAval+1)+ " to "+ weekendArray[d]);
                }
            }
            $intervalSelection.append($opt);
            lastWEAval = weekendArray[d]
        }
    }

    function updateYearlyGraph(year) {
        ajaxUpdate.getYearVisitor(year, function (data) {
            var dataArray = JSON.parse(data);
            /**
             * Update the yearly Area Graph
             */
            if (dataArray.length === 0){
                yearGraph.setData();
                monthlyGraphData = [];
            }else{
                yearGraph.setData(dataArray);
                monthlyGraphData = dataArray;
            }

            /**
             * Total Amount of Visitors in the year
             * @type {number}
             */
            var fullYearAmount = 0;
            for (var i = 0; i < dataArray.length; i++)
                fullYearAmount += Number(dataArray[i]["amount"]);

            fullYearAmount = addComma(fullYearAmount);
            $("#fullYearAmount").text(fullYearAmount);
        });
    }

    function updateIntervalGraph(month, date, year){
        var arr = date;
        var start = String(year)+ "-" +String(month)+ "-" +String(arr[0]),
            end = String(year)+ "-" +String(month)+ "-" +String(arr[1]);
        /**
         * Get the Visitors Data on the server
         */
        ajaxUpdate.getIntervalVisitor(start, end, function (data) {
            var dataArray = JSON.parse(data);
            /**
             * Update the Total Number of Visitors per Interval
             * @type {number}
             */
            var fullDailyTotal = 0;
            for (var i=0; i<dataArray.length; i++)
                fullDailyTotal += Number(dataArray[i]["amount"]);

            fullDailyTotal = addComma(fullDailyTotal);
            $("#fullDailyAmount").text(fullDailyTotal);

            if (dataArray.length === 0){
                weeklyGraph.setData();
                weeklyGraphData = []
            }else{
                weeklyGraph.setData(dataArray);
                weeklyGraphData = dataArray;
            }

        });
    }

    function updateWeeklyGraph(month, year, update){
        var weekendArray = getWeekIntervals(month, year);

        ajaxUpdate.getWeeklyVisitor(weekendArray, month, year, function (data) {
            var dataArray = JSON.parse(data);
            var fullWeeklyTotal = 0;

            for (var i=0; i<dataArray.length; i++){
                fullWeeklyTotal += Number(dataArray[i]["total"]);
            }

            fullWeeklyTotal = addComma(fullWeeklyTotal);
            $("#fullWeeklyAmount").text(fullWeeklyTotal);

            if (dataArray.length === 0){
                monthlyGraph.setData();
                monthlyGraphData = [];
            }else{
                monthlyGraph.setData(dataArray);
                monthlyGraphData = dataArray;
            }

            if (update){
                weeklyPrediction();
            }

        });
    }

    function linearRegression(y, x){
        var lr = {};
        var n = y.length;
        var sum_x = 0;
        var sum_y = 0;
        var sum_xy = 0;
        var sum_xx = 0;
        var sum_yy = 0;

        for (var i = 0; i < y.length; i++) {

            sum_x += x[i];
            sum_y += y[i];
            sum_xy += (x[i]*y[i]);
            sum_xx += (x[i]*x[i]);
            sum_yy += (y[i]*y[i]);
        }

        lr['slope'] = (n * sum_xy - sum_x * sum_y) / (n*sum_xx - sum_x * sum_x);
        lr['intercept'] = (sum_y - lr.slope * sum_x)/n;
        lr['r2'] = Math.pow((n*sum_xy - sum_x*sum_y)/Math.sqrt((n*sum_xx-sum_x*sum_x)*(n*sum_yy-sum_y*sum_y)),2);

        return lr;
    }

    function linearPredict(a, b, x){
        return (a*x) + b
    }

    function dailyPrediction() {
        var xArray = [], yArray = [];
        var prediction, result;
        /**
         * Do the prediction thing for the Weekly Data
         */
        for (var i=0; i<weeklyGraphData.length; i++){
            yArray.push(i);
            xArray.push(Number(weeklyGraphData[i]["amount"]));
        }


        prediction = linearRegression(yArray, xArray);
        result = linearPredict(prediction["slope"], prediction["intercept"], weeklyGraphData.length);

        // Predict an Exact Amount
        var MaxValue, MinValue;
        MaxValue = Math.max.apply(Math, xArray);
        MinValue = Math.min.apply(Math, xArray);
        var predictedValues = (MaxValue - MinValue) / 2;
        var htmlTemplate;
        if (result > 0 && result < 1){
            predictedValues = removeDecimal(predictedValues);
            predictedValues = addComma(predictedValues);
            htmlTemplate = $("<span/>", {"style": "color: #9ccc65"}).text(predictedValues);
        }
        else{
            if(predictedValues === -Infinity){
                htmlTemplate = $("<span/>", {"style": "color: #E53935"}).text("NULL");
            } else{
                predictedValues = removeDecimal(predictedValues);
                predictedValues = addComma(predictedValues);
                htmlTemplate = $("<span/>", {"style": "color: #E53935"}).text(predictedValues);
            }
        }

        var accuracyRate;
        if (isNaN(prediction["r2"])){
            accuracyRate = $("<span/>", {"style": "color: #d0d0d0; font-size: 14px"}).text(" Unknown");
        }else{
            prediction["r2"] = Math.round(prediction["r2"] * 100) / 100;
            accuracyRate = $("<span/>", {"style": "color: #d0d0d0; font-size: 14px"}).text(" (Rate:" +(prediction["r2"] * 100) + "%)");
        }

        htmlTemplate.append(accuracyRate);

        $("#todayPrediction").html(htmlTemplate);

    }

    function weeklyPrediction(){

        var xArray = [], yArray = [];
        var prediction, result;

        /**
         * Do the prediction thing for the Monthly Data
         */
        for (var i=0; i<monthlyGraphData.length; i++){
            yArray.push(i);
            xArray.push(Number(monthlyGraphData[i]["total"]));
        }


        prediction = linearRegression(yArray, xArray);
        result = linearPredict(prediction["slope"], prediction["intercept"], monthlyGraphData.length);
        // Predict an Exact Amount
        var MaxValue, MinValue;
        MaxValue = Math.max.apply(Math, xArray);
        MinValue = Math.min.apply(Math, xArray);
        var predictedValues = (MaxValue - MinValue) / 2;
        var htmlTemplate;
        if (result > 0 && result < 1){
            predictedValues = removeDecimal(predictedValues);
            predictedValues = addComma(predictedValues);
            htmlTemplate = $("<span/>", {"style": "color: #9ccc65"}).text(predictedValues);
        }
        else{
            if(predictedValues === -Infinity){
                htmlTemplate = $("<span/>", {"style": "color: #E53935"}).text("NULL");
            } else{
                predictedValues = removeDecimal(predictedValues);
                predictedValues = addComma(predictedValues);
                htmlTemplate = $("<span/>", {"style": "color: #E53935"}).text(predictedValues);
            }
        }

        var accuracyRate;
        if (isNaN(prediction["r2"])){
            accuracyRate = $("<span/>", {"style": "color: #d0d0d0; font-size: 14px"}).text(" Unknown");
        }else{
            prediction["r2"] = Math.round(prediction["r2"] * 100) / 100;
            accuracyRate = $("<span/>", {"style": "color: #d0d0d0; font-size: 14px"}).text(" (Rate:" +(prediction["r2"] * 100) + "%)");
        }

        htmlTemplate.append(accuracyRate);

        $("#nextWeekPrediction").html(htmlTemplate);

    }

    function monthlyPrediction() {
        var xArray = [], yArray = [];
        var prediction, result;
        /**
         * Do the prediction thing for the Yearly Data
         */
        for (var i=0; i<monthlyGraphData.length; i++){
            yArray.push(i);
            xArray.push(monthlyGraphData[i]["amount"]);
        }

        prediction = linearRegression(yArray, xArray);
        result = linearPredict(prediction["slope"], prediction["intercept"], monthlyGraphData.length);
        // Predict an Exact Amount
        var MaxValue, MinValue;
        MaxValue = Math.max.apply(Math, xArray);
        MinValue = Math.min.apply(Math, xArray);
        var predictedValues = (MaxValue - MinValue) / 2;
        var htmlTemplate;

        if (result > 0 && result < 1){
            predictedValues = removeDecimal(predictedValues);
            predictedValues = addComma(predictedValues);
            htmlTemplate = $("<span/>", {"style": "color: #9ccc65"}).text(predictedValues);
        }
        else{
            if(predictedValues === -Infinity){
                htmlTemplate = $("<span/>", {"style": "color: #E53935"}).text("NULL");
            } else{
                predictedValues = removeDecimal(predictedValues);
                predictedValues = addComma(predictedValues);
                htmlTemplate = $("<span/>", {"style": "color: #E53935"}).text(predictedValues);
            }
        }

        var accuracyRate;
        if (isNaN(prediction["r2"])){
            accuracyRate = $("<span/>", {"style": "color: #d0d0d0; font-size: 14px"}).text(" Unknown");
        }else{
            prediction["r2"] = Math.round(prediction["r2"] * 100) / 100;
            accuracyRate = $("<span/>", {"style": "color: #d0d0d0; font-size: 14px"}).text(" (Rate:" +(prediction["r2"] * 100) + "%)");
        }

        htmlTemplate.append(accuracyRate);

        $("#nextMonthPrediction").html(htmlTemplate);
    }

    function removeDecimal(x){
        return Math.round(x);
    }

    function addComma(x) {
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    }

    function updateAjaxContent(year) {
        ajaxUpdate.getPrintInterface(year, function (data) {
            $("#ajaxContent").html(data);
        });
    }


</script>
<script type="text/javascript">

	{# Initialize the AjaxUpdate Class when the page is loaded #}
    var ajaxUpdate = new AjaxUpdate();

	{# Selectors #}
    var $yearSelection = $("select#yearSelection"),
        $monthSelection = $("select#monthSelection"),
        $intervalSelection = $("select#intervalSelection");

    // Update the Years on the Selection Form
    ajaxUpdate.getAllYears(function (data) {
        var dataArray = JSON.parse(data),
            currentYear = String(new Date().getFullYear());

        // Remove the Default Options in the selection
        $yearSelection.html("");

        if (dataArray.indexOf(currentYear) === -1){
            var $currentYearOpt = $("<option/>", {"value": "current"}).text(currentYear + " (Current)");
            $yearSelection.append($currentYearOpt);
        }

        for (var i=0; i < dataArray.length; i++){
            var $opt;
            if (dataArray[i] === currentYear){
                $opt = $("<option/>", {"value": "current"}).text(dataArray[i] + "(Current)");
            }else{
                $opt = $("<option/>", {"value": dataArray[i]}).text(dataArray[i]);
            }
            $yearSelection.append($opt);
        }
    });


    // Select the Current Month on the monthselection
    var currentMonth = String(new Date().getMonth()+ 1);

    /**
     * Set default Month Value on Load
     */
    $monthSelection.val(currentMonth).change();

    var currentYear = new Date().getFullYear();

    /**
     *  Update the IntervalSelection based on the year
     */
    updateIntervalSelection(currentMonth, currentYear);

    updateAjaxContent(currentYear);

    /**
     * Update the Yearly Graph CHART
     */
    updateYearlyGraph(currentYear);

    /**
     * Update the Graph of the Interval
     */
    var arr = $intervalSelection.val().split(",");
    updateIntervalGraph(currentMonth, arr, currentYear);


    /**
     * Update the Weekly Graph Chart
     */
    updateWeeklyGraph(currentMonth, currentYear, true);

    /**
     *  START EVENT HANDLING
     */
    $yearSelection.on("change", function () {
        if($(this).val() !== "current"){
            var yearValue = $(this).val();

            updateAjaxContent(yearValue);

            /**
             * Make the Prediction Chart Invinsible
             */
            $("#predictionChart").css({
                "display": "none",
                "visibility": "hidden"
            });

            /**
             * Set Default Month Value
             */
            $monthSelection.val(1).change();


            /**
             * Update the Yearly Graph CHART
             */
            ajaxUpdate.getYearVisitor(yearValue, function (data) {
                var dataArray = JSON.parse(data);
                /**
                 * Update the yearly Area Graph
                 */
                if (dataArray.length === 0){
                    yearGraph.setData();
                    monthlyGraphData = [];
                }else{
                    yearGraph.setData(dataArray);
                    monthlyGraphData = dataArray;
                }

                /**
                 * Total Amount of Visitors in the year
                 * @type {number}
                 */
                var fullYearAmount = 0;
                for (var i = 0; i < dataArray.length; i++)
                    fullYearAmount += Number(dataArray[i]["amount"]);

                fullYearAmount = addComma(fullYearAmount);
                $("#fullYearAmount").text(fullYearAmount);
            });

            /**
             *  Update the IntervalSelection based on the year
             */
            updateIntervalSelection(1, yearValue);

            /**
             * Update the Graph of the Interval
             */
            var arrInterval = $intervalSelection.val().split(",");
            updateIntervalGraph(1, arrInterval, yearValue);


            /**
             * Update the Weekly Graph Chart
             */
            updateWeeklyGraph(1, yearValue, false);


        }else{
            /**
             * Make the Prediction Visible again
             */
            $("#predictionChart").css({
                "display": "",
                "visibility": ""
            });

            /**
             * Set Default Month Value
             */
            $monthSelection.val(currentMonth).change();

            var currentYear = new Date().getFullYear();

            updateAjaxContent(currentYear);

            /**
             * Update the Yearly Graph CHART
             */

            ajaxUpdate.getYearVisitor(currentYear, function (data) {
                var dataArray = JSON.parse(data);
                /**
                 * Update the yearly Area Graph
                 */
                if (dataArray.length === 0){
                    yearGraph.setData();
                    monthlyGraphData = [];
                }else{
                    yearGraph.setData(dataArray);
                    monthlyGraphData = dataArray;
                }

                /**
                 * Total Amount of Visitors in the year
                 * @type {number}
                 */
                var fullYearAmount = 0;
                for (var i = 0; i < dataArray.length; i++)
                    fullYearAmount += Number(dataArray[i]["amount"]);

                fullYearAmount = addComma(fullYearAmount);
                $("#fullYearAmount").text(fullYearAmount);
            });

            /**
             *  Update the IntervalSelection based on the year
             */
            updateIntervalSelection(currentMonth, currentYear);

            /**
             * Update the Graph of the Interval
             */
            var arr = $intervalSelection.val().split(",");
            updateIntervalGraph(currentMonth, arr, currentYear);

            /**
             * Update the Weekly Graph Chart
             */
            updateWeeklyGraph(currentMonth, currentYear, false)
        }
    });

    $monthSelection.on("change", function () {
        var selectedMonth = $(this).val();
        var yearValue;

        if ($yearSelection.val() !== "current"){
            yearValue = $yearSelection.val()
        } else{
            yearValue = new Date().getFullYear();
        }

        /**
         *  Update the IntervalSelection based on the year
         */
        updateIntervalSelection(selectedMonth, yearValue);

        /**
         * Update the Graph of the Interval
         */
        var arr = $intervalSelection.val().split(",");
        updateIntervalGraph(selectedMonth, arr, yearValue);

        updateWeeklyGraph(selectedMonth, yearValue, false)

    });

    $intervalSelection.on("change", function () {
        var currentYear;

        if ($yearSelection.val() !== "current")
            currentYear = $yearSelection.val();
        else
            currentYear = new Date().getFullYear();

        var currentMonth = $monthSelection.val();

        /**
         * Update the Graph of the Interval
         */
        var arr = $(this).val().split(",");
        updateIntervalGraph(currentMonth, arr, currentYear);

    });
</script>